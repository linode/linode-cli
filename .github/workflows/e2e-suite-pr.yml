on:
  pull_request:
  repository_dispatch:
    types: [acctest-command]

name: PR E2E Tests

jobs:
  # Maintainer has commented /acctest on a pull request
  integration-fork:
    runs-on: ubuntu-latest
    if:
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      github.event.client_payload.pull_request.head.sha == github.event.client_payload.slash_command.sha

    steps:
      - uses: actions-ecosystem/action-regex-match@v2
        id: validate-tests
        with:
          text: ${{ github.event.client_payload.slash_command.tests }}
          regex: '[^a-z0-9-:.\/_]'  # Tests validation
          flags: gi

      # Check out merge commit
      - name: Checkout PR
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.slash_command.sha }}

      - name: Update system packages
        run: sudo apt-get update -y

      - name: Install system deps
        run: sudo apt-get install -y build-essential

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python deps
        run: pip install -r requirements.txt -r requirements-dev.txt wheel boto

      - name: Install the CLI
        run: make install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: make INTEGRATION_TEST_PATH="${{ github.event.client_payload.slash_command.tests }}" testint
        if: ${{ steps.validate-tests.outputs.match == '' }}
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_TOKEN }}

      - uses: actions/github-script@v5
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
