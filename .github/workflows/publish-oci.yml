name: OCI Image Publish
on:
  workflow_dispatch: null
  release:
    types: [ published ]
jobs:
  oci_publish:
    name: Build and publish the OCI image
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: setup python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: make requirements

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # pin@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@ecf95283f03858871ff00b787d79c419715afc34 # pin@v2.7.0

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # pin@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # This is necessary as we want to ensure that version tags
      # are properly formatted before passing them into the
      # DockerFile.
      - uses: actions/github-script@v7
        id: cli_version
        with:
          script: |
            let tag_name = '${{ github.event.release.tag_name }}';
            
            if (tag_name.startsWith("v")) {
              tag_name = tag_name.slice(1);
            }
            
            return tag_name;
          result-encoding: string

      - name: Build and push to DockerHub
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # pin@v4.1.1
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: linode/cli:${{ steps.cli_version.outputs.result }},linode/cli:latest
          build-args: |
            linode_cli_version=${{ steps.cli_version.outputs.result }}
            github_token=${{ secrets.GITHUB_TOKEN }}
